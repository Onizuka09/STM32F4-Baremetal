
ADC_multi_channel_continues_conversion.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000274  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000408  08000410  00010410  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000408  08000408  00010410  2**0
                  CONTENTS
  4 .ARM          00000000  08000408  08000408  00010410  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000408  08000410  00010410  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000408  08000408  00010408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800040c  0800040c  0001040c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010410  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000028  20000000  08000410  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  08000410  00020028  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010410  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010440  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000057c  00000000  00000000  00010483  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000001f5  00000000  00000000  000109ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000080  00000000  00000000  00010bf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000052  00000000  00000000  00010c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000dc73  00000000  00000000  00010cca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000a36  00000000  00000000  0001e93d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0004f63c  00000000  00000000  0001f373  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000000f0  00000000  00000000  0006e9b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0006eaa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080003f0 	.word	0x080003f0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	080003f0 	.word	0x080003f0

080001d4 <init_GPIO>:
#define ADC_CH3         (1U<<2)
#define ADC_CH5			(1U<<4)
#define SR_EOC 			(1U<<1)

void init_GPIO(uint8_t Pin)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]

	/* GPIO configuration PA1 */
	// enable clock access to gpioA
	RCC->AHB1ENR |=GPIOA_EN_clk ;
 80001de:	4b10      	ldr	r3, [pc, #64]	; (8000220 <init_GPIO+0x4c>)
 80001e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001e2:	4a0f      	ldr	r2, [pc, #60]	; (8000220 <init_GPIO+0x4c>)
 80001e4:	f043 0301 	orr.w	r3, r3, #1
 80001e8:	6313      	str	r3, [r2, #48]	; 0x30
	// PA1 as analog mode (MODER=11)
	GPIOA->MODER |= (1U<<Pin*2);  // pin_num*2
 80001ea:	4b0e      	ldr	r3, [pc, #56]	; (8000224 <init_GPIO+0x50>)
 80001ec:	681a      	ldr	r2, [r3, #0]
 80001ee:	79fb      	ldrb	r3, [r7, #7]
 80001f0:	005b      	lsls	r3, r3, #1
 80001f2:	2101      	movs	r1, #1
 80001f4:	fa01 f303 	lsl.w	r3, r1, r3
 80001f8:	490a      	ldr	r1, [pc, #40]	; (8000224 <init_GPIO+0x50>)
 80001fa:	4313      	orrs	r3, r2
 80001fc:	600b      	str	r3, [r1, #0]
	GPIOA->MODER |= (1U<<((Pin*2) +1) ); // pin_num*2 +1
 80001fe:	4b09      	ldr	r3, [pc, #36]	; (8000224 <init_GPIO+0x50>)
 8000200:	681a      	ldr	r2, [r3, #0]
 8000202:	79fb      	ldrb	r3, [r7, #7]
 8000204:	005b      	lsls	r3, r3, #1
 8000206:	3301      	adds	r3, #1
 8000208:	2101      	movs	r1, #1
 800020a:	fa01 f303 	lsl.w	r3, r1, r3
 800020e:	4905      	ldr	r1, [pc, #20]	; (8000224 <init_GPIO+0x50>)
 8000210:	4313      	orrs	r3, r2
 8000212:	600b      	str	r3, [r1, #0]

	/* ADC configuration*/
return ;
 8000214:	bf00      	nop
}
 8000216:	370c      	adds	r7, #12
 8000218:	46bd      	mov	sp, r7
 800021a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021e:	4770      	bx	lr
 8000220:	40023800 	.word	0x40023800
 8000224:	40020000 	.word	0x40020000

08000228 <init_ADC>:
void init_ADC()
{
 8000228:	b480      	push	{r7}
 800022a:	af00      	add	r7, sp, #0
	// enable clock access
	RCC->APB2ENR |=ADC_EN_clk ;
 800022c:	4b1d      	ldr	r3, [pc, #116]	; (80002a4 <init_ADC+0x7c>)
 800022e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000230:	4a1c      	ldr	r2, [pc, #112]	; (80002a4 <init_ADC+0x7c>)
 8000232:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000236:	6453      	str	r3, [r2, #68]	; 0x44
	//sequence ch3 , ch5 ch1
	// conversion sequence start ( which channel to start)

	//SQ1 ch3 11
	ADC1->SQR3 |= (1U<<0);
 8000238:	4b1b      	ldr	r3, [pc, #108]	; (80002a8 <init_ADC+0x80>)
 800023a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800023c:	4a1a      	ldr	r2, [pc, #104]	; (80002a8 <init_ADC+0x80>)
 800023e:	f043 0301 	orr.w	r3, r3, #1
 8000242:	6353      	str	r3, [r2, #52]	; 0x34

	ADC1->SQR3 |= (1U<<1);
 8000244:	4b18      	ldr	r3, [pc, #96]	; (80002a8 <init_ADC+0x80>)
 8000246:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000248:	4a17      	ldr	r2, [pc, #92]	; (80002a8 <init_ADC+0x80>)
 800024a:	f043 0302 	orr.w	r3, r3, #2
 800024e:	6353      	str	r3, [r2, #52]	; 0x34
	//SQ2 ch5 101
	ADC1->SQR3 |= (1U<<5);
 8000250:	4b15      	ldr	r3, [pc, #84]	; (80002a8 <init_ADC+0x80>)
 8000252:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000254:	4a14      	ldr	r2, [pc, #80]	; (80002a8 <init_ADC+0x80>)
 8000256:	f043 0320 	orr.w	r3, r3, #32
 800025a:	6353      	str	r3, [r2, #52]	; 0x34
	ADC1->SQR3 &= ~(1U<<6);
 800025c:	4b12      	ldr	r3, [pc, #72]	; (80002a8 <init_ADC+0x80>)
 800025e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000260:	4a11      	ldr	r2, [pc, #68]	; (80002a8 <init_ADC+0x80>)
 8000262:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000266:	6353      	str	r3, [r2, #52]	; 0x34
	ADC1->SQR3 |= (1U<<7);
 8000268:	4b0f      	ldr	r3, [pc, #60]	; (80002a8 <init_ADC+0x80>)
 800026a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800026c:	4a0e      	ldr	r2, [pc, #56]	; (80002a8 <init_ADC+0x80>)
 800026e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000272:	6353      	str	r3, [r2, #52]	; 0x34
	//SQ3 ch1
	ADC1->SQR3 |= (1U<<10);
 8000274:	4b0c      	ldr	r3, [pc, #48]	; (80002a8 <init_ADC+0x80>)
 8000276:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000278:	4a0b      	ldr	r2, [pc, #44]	; (80002a8 <init_ADC+0x80>)
 800027a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800027e:	6353      	str	r3, [r2, #52]	; 0x34
	// conversion sequence length ( 3)
	ADC1->SQR1 |= (1U<<20);
 8000280:	4b09      	ldr	r3, [pc, #36]	; (80002a8 <init_ADC+0x80>)
 8000282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000284:	4a08      	ldr	r2, [pc, #32]	; (80002a8 <init_ADC+0x80>)
 8000286:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800028a:	62d3      	str	r3, [r2, #44]	; 0x2c
	ADC1->SQR1 |= (1U<<21);
 800028c:	4b06      	ldr	r3, [pc, #24]	; (80002a8 <init_ADC+0x80>)
 800028e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000290:	4a05      	ldr	r2, [pc, #20]	; (80002a8 <init_ADC+0x80>)
 8000292:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000296:	62d3      	str	r3, [r2, #44]	; 0x2c



	return ;
 8000298:	bf00      	nop
}
 800029a:	46bd      	mov	sp, r7
 800029c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a0:	4770      	bx	lr
 80002a2:	bf00      	nop
 80002a4:	40023800 	.word	0x40023800
 80002a8:	40012000 	.word	0x40012000

080002ac <Read_ADC1>:
uint32_t Read_ADC1()
{
 80002ac:	b480      	push	{r7}
 80002ae:	af00      	add	r7, sp, #0
	 while (!(ADC1->SR & SR_EOC)){}
 80002b0:	bf00      	nop
 80002b2:	4b06      	ldr	r3, [pc, #24]	; (80002cc <Read_ADC1+0x20>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	f003 0302 	and.w	r3, r3, #2
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d0f9      	beq.n	80002b2 <Read_ADC1+0x6>

	 return ADC1->DR ;
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <Read_ADC1+0x20>)
 80002c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c

}
 80002c2:	4618      	mov	r0, r3
 80002c4:	46bd      	mov	sp, r7
 80002c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ca:	4770      	bx	lr
 80002cc:	40012000 	.word	0x40012000

080002d0 <Start_conversion>:
void Start_conversion()
{
 80002d0:	b480      	push	{r7}
 80002d2:	af00      	add	r7, sp, #0
	// set conversion mode (continues conversion)  CONT
	ADC1->CR2 |= (1U<<1);
 80002d4:	4b0b      	ldr	r3, [pc, #44]	; (8000304 <Start_conversion+0x34>)
 80002d6:	689b      	ldr	r3, [r3, #8]
 80002d8:	4a0a      	ldr	r2, [pc, #40]	; (8000304 <Start_conversion+0x34>)
 80002da:	f043 0302 	orr.w	r3, r3, #2
 80002de:	6093      	str	r3, [r2, #8]
	// enable ADC Module  ADON
	ADC1->CR2  |= (1U<<0);
 80002e0:	4b08      	ldr	r3, [pc, #32]	; (8000304 <Start_conversion+0x34>)
 80002e2:	689b      	ldr	r3, [r3, #8]
 80002e4:	4a07      	ldr	r2, [pc, #28]	; (8000304 <Start_conversion+0x34>)
 80002e6:	f043 0301 	orr.w	r3, r3, #1
 80002ea:	6093      	str	r3, [r2, #8]
	//ADC  start conversion: SWSTART
	ADC1->CR2 |= (1U<<30);
 80002ec:	4b05      	ldr	r3, [pc, #20]	; (8000304 <Start_conversion+0x34>)
 80002ee:	689b      	ldr	r3, [r3, #8]
 80002f0:	4a04      	ldr	r2, [pc, #16]	; (8000304 <Start_conversion+0x34>)
 80002f2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80002f6:	6093      	str	r3, [r2, #8]
}
 80002f8:	bf00      	nop
 80002fa:	46bd      	mov	sp, r7
 80002fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000300:	4770      	bx	lr
 8000302:	bf00      	nop
 8000304:	40012000 	.word	0x40012000

08000308 <main>:
#define GPIO_pin_A3 3
#define GPIO_pin_A5 5

uint32_t data,data2,data3 ;
int main(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	af00      	add	r7, sp, #0
	init_GPIO(GPIO_pin_A1);
 800030c:	2001      	movs	r0, #1
 800030e:	f7ff ff61 	bl	80001d4 <init_GPIO>
	init_GPIO(GPIO_pin_A3);
 8000312:	2003      	movs	r0, #3
 8000314:	f7ff ff5e 	bl	80001d4 <init_GPIO>
	init_GPIO(GPIO_pin_A5);
 8000318:	2005      	movs	r0, #5
 800031a:	f7ff ff5b 	bl	80001d4 <init_GPIO>
	init_ADC();
 800031e:	f7ff ff83 	bl	8000228 <init_ADC>
	Start_conversion();
 8000322:	f7ff ffd5 	bl	80002d0 <Start_conversion>
	while (1)
		{
		data = Read_ADC1();
 8000326:	f7ff ffc1 	bl	80002ac <Read_ADC1>
 800032a:	4603      	mov	r3, r0
 800032c:	4a06      	ldr	r2, [pc, #24]	; (8000348 <main+0x40>)
 800032e:	6013      	str	r3, [r2, #0]
		data2 = Read_ADC1();
 8000330:	f7ff ffbc 	bl	80002ac <Read_ADC1>
 8000334:	4603      	mov	r3, r0
 8000336:	4a05      	ldr	r2, [pc, #20]	; (800034c <main+0x44>)
 8000338:	6013      	str	r3, [r2, #0]
		data3 = Read_ADC1();
 800033a:	f7ff ffb7 	bl	80002ac <Read_ADC1>
 800033e:	4603      	mov	r3, r0
 8000340:	4a03      	ldr	r2, [pc, #12]	; (8000350 <main+0x48>)
 8000342:	6013      	str	r3, [r2, #0]
		data = Read_ADC1();
 8000344:	e7ef      	b.n	8000326 <main+0x1e>
 8000346:	bf00      	nop
 8000348:	2000001c 	.word	0x2000001c
 800034c:	20000020 	.word	0x20000020
 8000350:	20000024 	.word	0x20000024

08000354 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000354:	480d      	ldr	r0, [pc, #52]	; (800038c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000356:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000358:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800035c:	480c      	ldr	r0, [pc, #48]	; (8000390 <LoopForever+0x6>)
  ldr r1, =_edata
 800035e:	490d      	ldr	r1, [pc, #52]	; (8000394 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000360:	4a0d      	ldr	r2, [pc, #52]	; (8000398 <LoopForever+0xe>)
  movs r3, #0
 8000362:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000364:	e002      	b.n	800036c <LoopCopyDataInit>

08000366 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000366:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000368:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800036a:	3304      	adds	r3, #4

0800036c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800036c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800036e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000370:	d3f9      	bcc.n	8000366 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000372:	4a0a      	ldr	r2, [pc, #40]	; (800039c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000374:	4c0a      	ldr	r4, [pc, #40]	; (80003a0 <LoopForever+0x16>)
  movs r3, #0
 8000376:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000378:	e001      	b.n	800037e <LoopFillZerobss>

0800037a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800037a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800037c:	3204      	adds	r2, #4

0800037e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800037e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000380:	d3fb      	bcc.n	800037a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000382:	f000 f811 	bl	80003a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000386:	f7ff ffbf 	bl	8000308 <main>

0800038a <LoopForever>:

LoopForever:
  b LoopForever
 800038a:	e7fe      	b.n	800038a <LoopForever>
  ldr   r0, =_estack
 800038c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000390:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000394:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000398:	08000410 	.word	0x08000410
  ldr r2, =_sbss
 800039c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003a0:	20000028 	.word	0x20000028

080003a4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003a4:	e7fe      	b.n	80003a4 <ADC_IRQHandler>
	...

080003a8 <__libc_init_array>:
 80003a8:	b570      	push	{r4, r5, r6, lr}
 80003aa:	4d0d      	ldr	r5, [pc, #52]	; (80003e0 <__libc_init_array+0x38>)
 80003ac:	4c0d      	ldr	r4, [pc, #52]	; (80003e4 <__libc_init_array+0x3c>)
 80003ae:	1b64      	subs	r4, r4, r5
 80003b0:	10a4      	asrs	r4, r4, #2
 80003b2:	2600      	movs	r6, #0
 80003b4:	42a6      	cmp	r6, r4
 80003b6:	d109      	bne.n	80003cc <__libc_init_array+0x24>
 80003b8:	4d0b      	ldr	r5, [pc, #44]	; (80003e8 <__libc_init_array+0x40>)
 80003ba:	4c0c      	ldr	r4, [pc, #48]	; (80003ec <__libc_init_array+0x44>)
 80003bc:	f000 f818 	bl	80003f0 <_init>
 80003c0:	1b64      	subs	r4, r4, r5
 80003c2:	10a4      	asrs	r4, r4, #2
 80003c4:	2600      	movs	r6, #0
 80003c6:	42a6      	cmp	r6, r4
 80003c8:	d105      	bne.n	80003d6 <__libc_init_array+0x2e>
 80003ca:	bd70      	pop	{r4, r5, r6, pc}
 80003cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80003d0:	4798      	blx	r3
 80003d2:	3601      	adds	r6, #1
 80003d4:	e7ee      	b.n	80003b4 <__libc_init_array+0xc>
 80003d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80003da:	4798      	blx	r3
 80003dc:	3601      	adds	r6, #1
 80003de:	e7f2      	b.n	80003c6 <__libc_init_array+0x1e>
 80003e0:	08000408 	.word	0x08000408
 80003e4:	08000408 	.word	0x08000408
 80003e8:	08000408 	.word	0x08000408
 80003ec:	0800040c 	.word	0x0800040c

080003f0 <_init>:
 80003f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003f2:	bf00      	nop
 80003f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003f6:	bc08      	pop	{r3}
 80003f8:	469e      	mov	lr, r3
 80003fa:	4770      	bx	lr

080003fc <_fini>:
 80003fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003fe:	bf00      	nop
 8000400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000402:	bc08      	pop	{r3}
 8000404:	469e      	mov	lr, r3
 8000406:	4770      	bx	lr
